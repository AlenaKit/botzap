import logging
import datetime
import asyncio
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# ============== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è =====================
API_TOKEN = "8194805573:AAEMzVKN3UW78NG723YKIuKdwn9M2rcUNOI"   # –≤—Å—Ç–∞–≤ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω Telegram
SERVICE_ACCOUNT_FILE = "botzap-466905-c28e8b2e744c.json"  # –Ω–∞–∑–≤–∞ —Ç–≤–æ–≥–æ JSON-—Ñ–∞–π–ª—É
GOOGLE_SHEET_ID = "602608749"                # ID —Ç–≤–æ—î—ó Google —Ç–∞–±–ª–∏—Ü—ñ
NOTIFY_USERS = [602608749, 5321616837]  # Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∏–º –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å

logging.basicConfig(level=logging.INFO)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets
scopes = ["https://www.googleapis.com/auth/spreadsheets"]
credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=scopes)
gc = gspread.authorize(credentials)
worksheet = gc.open_by_key(GOOGLE_SHEET_ID).sheet1

# Telegram bot
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ===================== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =====================

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏ –∞–≤—Ç–æ")],
        [KeyboardButton(text="üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å–∏")]
    ],
    resize_keyboard=True
)

services_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ö–æ–º–ø–ª–µ–∫—Å", callback_data="service_–ö–æ–º–ø–ª–µ–∫—Å")],
        [InlineKeyboardButton(text="–ü–æ–ª—ñ—Ä—É–≤–∞–Ω–Ω—è", callback_data="service_–ü–æ–ª—ñ—Ä—É–≤–∞–Ω–Ω—è")],
        [InlineKeyboardButton(text="–•—ñ–º—á–∏—Å—Ç–∫–∞", callback_data="service_–•—ñ–º—á–∏—Å—Ç–∫–∞")],
        [InlineKeyboardButton(text="–ü–æ–∫–ª–µ–π–∫–∞ –ø–ª—ñ–≤–∫–∏", callback_data="service_–ü–æ–∫–ª–µ–π–∫–∞ –ø–ª—ñ–≤–∫–∏")],
        [InlineKeyboardButton(text="–Ü–Ω—à–µ", callback_data="service_–Ü–Ω—à–µ")]
    ]
)

def create_date_keyboard(prefix):
    today = datetime.date.today()
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for i in range(7):
        day = today + datetime.timedelta(days=i)
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=day.strftime("%d.%m.%Y"), callback_data=f"{prefix}_{day}")
        ])
    return kb

def create_time_keyboard(prefix):
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    start = datetime.time(8, 0)
    end = datetime.time(19, 30)
    t = datetime.datetime.combine(datetime.date.today(), start)
    end_dt = datetime.datetime.combine(datetime.date.today(), end)
    row = []
    while t <= end_dt:
        row.append(InlineKeyboardButton(text=t.strftime("%H:%M"), callback_data=f"{prefix}_{t.strftime('%H:%M')}"))
        if len(row) == 4:
            kb.inline_keyboard.append(row)
            row = []
        t += datetime.timedelta(minutes=15)
    if row:
        kb.inline_keyboard.append(row)
    return kb

# ===================== –û–±—Ä–æ–±–Ω–∏–∫–∏ =====================

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_kb)

# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_data = {}

@dp.message(lambda m: m.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏ –∞–≤—Ç–æ")
async def start_booking(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:", reply_markup=create_date_keyboard("bookingdate"))

@dp.callback_query(lambda c: c.data.startswith("bookingdate_"))
async def choose_booking_date(callback: types.CallbackQuery):
    date_str = callback.data.split("_", 1)[1]
    user_data[callback.from_user.id] = {"date": date_str}
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:", reply_markup=create_time_keyboard("bookingtime"))
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("bookingtime_"))
async def choose_booking_time(callback: types.CallbackQuery):
    time_str = callback.data.split("_", 1)[1]
    user_data[callback.from_user.id]["time"] = time_str
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å: –ú–∞—Ä–∫–∞ –ú–æ–¥–µ–ª—å –ù–æ–º–µ—Ä –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º")
    await callback.answer()

@dp.message(lambda m: m.from_user.id in user_data and "car" not in user_data[m.from_user.id])
async def get_car_info(message: types.Message):
    user_data[message.from_user.id]["car"] = message.text
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:", reply_markup=services_kb)

@dp.callback_query(lambda c: c.data.startswith("service_"))
async def choose_service(callback: types.CallbackQuery):
    service = callback.data.split("_", 1)[1]
    data = user_data.pop(callback.from_user.id)
    new_id = len(worksheet.get_all_values()) + 1
    worksheet.append_row([new_id, data["date"], data["time"], data["car"], service])

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
    for admin_id in NOTIFY_USERS:
        try:
            await bot.send_message(admin_id, 
                f"–ù–û–í–ò–ô –ó–ê–ü–ò–°:\n–î–∞—Ç–∞: {data['date']}\n–ß–∞—Å: {data['time']}\n–ê–≤—Ç–æ: {data['car']}\n–ü–æ—Å–ª—É–≥–∞: {service}")
        except Exception as e:
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {admin_id}: {e}")

    await callback.message.answer("–ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=main_kb)
    await callback.answer()

@dp.message(lambda m: m.text == "üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å–∏")
async def view_records(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:", reply_markup=create_date_keyboard("viewdate"))

@dp.callback_query(lambda c: c.data.startswith("viewdate_"))
async def view_records_date(callback: types.CallbackQuery):
    date_str = callback.data.split("_", 1)[1]
    records = worksheet.get_all_values()[1:]  # –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    filtered = [r for r in records if r[1] == date_str]
    if filtered:
        text = f"–ó–∞–ø–∏—Å–∏ –Ω–∞ {date_str}:\n\n" + "\n".join(
            [f"{r[2]} | {r[3]} | {r[4]}" for r in filtered]
        )
    else:
        text = f"–ó–∞–ø–∏—Å—ñ–≤ –Ω–∞ {date_str} –Ω–µ–º–∞—î."
    await callback.message.answer(text)
    await callback.answer()

# ===================== –ó–∞–ø—É—Å–∫ =====================
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
